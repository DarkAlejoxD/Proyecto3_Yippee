//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Data/Inputs/Menus.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace InputController
{
    public partial class @Menus: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Menus()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Menus"",
    ""maps"": [
        {
            ""name"": ""Pause"",
            ""id"": ""6bb9ab99-9f11-4ef1-bb37-ae5e562e464d"",
            ""actions"": [
                {
                    ""name"": ""Pause/Unpause"",
                    ""type"": ""Button"",
                    ""id"": ""469b36d1-9fa2-465e-9c6c-88a57ec5ffb9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""26fbf014-1e61-411c-9a74-1e7211ab59cb"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Pause/Unpause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""842f5609-8bb6-463b-a401-59ad0bd41b99"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pause/Unpause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Tutorials"",
            ""id"": ""a0a8d97d-1a78-4195-837e-ab6bee7eed0f"",
            ""actions"": [
                {
                    ""name"": ""PassTutorial"",
                    ""type"": ""Button"",
                    ""id"": ""988188f7-cc6e-4db0-97bd-3bea240a5cc8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c79e50a1-1fd4-4f3a-be0a-8953351c1dc4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""PassTutorial"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""429b48c0-6790-4127-a242-11d8f47dfe97"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""PassTutorial"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Pause
            m_Pause = asset.FindActionMap("Pause", throwIfNotFound: true);
            m_Pause_PauseUnpause = m_Pause.FindAction("Pause/Unpause", throwIfNotFound: true);
            // Tutorials
            m_Tutorials = asset.FindActionMap("Tutorials", throwIfNotFound: true);
            m_Tutorials_PassTutorial = m_Tutorials.FindAction("PassTutorial", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Pause
        private readonly InputActionMap m_Pause;
        private List<IPauseActions> m_PauseActionsCallbackInterfaces = new List<IPauseActions>();
        private readonly InputAction m_Pause_PauseUnpause;
        public struct PauseActions
        {
            private @Menus m_Wrapper;
            public PauseActions(@Menus wrapper) { m_Wrapper = wrapper; }
            public InputAction @PauseUnpause => m_Wrapper.m_Pause_PauseUnpause;
            public InputActionMap Get() { return m_Wrapper.m_Pause; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PauseActions set) { return set.Get(); }
            public void AddCallbacks(IPauseActions instance)
            {
                if (instance == null || m_Wrapper.m_PauseActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PauseActionsCallbackInterfaces.Add(instance);
                @PauseUnpause.started += instance.OnPauseUnpause;
                @PauseUnpause.performed += instance.OnPauseUnpause;
                @PauseUnpause.canceled += instance.OnPauseUnpause;
            }

            private void UnregisterCallbacks(IPauseActions instance)
            {
                @PauseUnpause.started -= instance.OnPauseUnpause;
                @PauseUnpause.performed -= instance.OnPauseUnpause;
                @PauseUnpause.canceled -= instance.OnPauseUnpause;
            }

            public void RemoveCallbacks(IPauseActions instance)
            {
                if (m_Wrapper.m_PauseActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPauseActions instance)
            {
                foreach (var item in m_Wrapper.m_PauseActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PauseActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PauseActions @Pause => new PauseActions(this);

        // Tutorials
        private readonly InputActionMap m_Tutorials;
        private List<ITutorialsActions> m_TutorialsActionsCallbackInterfaces = new List<ITutorialsActions>();
        private readonly InputAction m_Tutorials_PassTutorial;
        public struct TutorialsActions
        {
            private @Menus m_Wrapper;
            public TutorialsActions(@Menus wrapper) { m_Wrapper = wrapper; }
            public InputAction @PassTutorial => m_Wrapper.m_Tutorials_PassTutorial;
            public InputActionMap Get() { return m_Wrapper.m_Tutorials; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TutorialsActions set) { return set.Get(); }
            public void AddCallbacks(ITutorialsActions instance)
            {
                if (instance == null || m_Wrapper.m_TutorialsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_TutorialsActionsCallbackInterfaces.Add(instance);
                @PassTutorial.started += instance.OnPassTutorial;
                @PassTutorial.performed += instance.OnPassTutorial;
                @PassTutorial.canceled += instance.OnPassTutorial;
            }

            private void UnregisterCallbacks(ITutorialsActions instance)
            {
                @PassTutorial.started -= instance.OnPassTutorial;
                @PassTutorial.performed -= instance.OnPassTutorial;
                @PassTutorial.canceled -= instance.OnPassTutorial;
            }

            public void RemoveCallbacks(ITutorialsActions instance)
            {
                if (m_Wrapper.m_TutorialsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ITutorialsActions instance)
            {
                foreach (var item in m_Wrapper.m_TutorialsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_TutorialsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public TutorialsActions @Tutorials => new TutorialsActions(this);
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        public interface IPauseActions
        {
            void OnPauseUnpause(InputAction.CallbackContext context);
        }
        public interface ITutorialsActions
        {
            void OnPassTutorial(InputAction.CallbackContext context);
        }
    }
}
